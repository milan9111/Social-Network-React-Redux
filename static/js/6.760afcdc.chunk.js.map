{"version":3,"sources":["components/common/FormsControls/FormsControl.module.css","utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","Input","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","name","validate","component","type","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCDzH,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAGA,EACH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,yJCFpBE,EAAW,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAE3CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACI,8BACI,oDAAcL,GAAWE,MAE5BC,EAAW,+BAAOF,EAAKI,QAAgB,SAMvCI,EAAQ,SAAC,GAA6B,IAA5BT,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAExCC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACI,8BACI,iDAAWL,GAAWE,MAEzBC,EAAW,+BAAOF,EAAKI,QAAgB,U,iCC7BpD,oGA8BMK,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EApBL,SAACT,GACf,OACI,uBAAMW,SAAUX,EAAMY,aAAtB,UACI,8BACI,cAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,SAAU,CAACvB,KAAWwB,UAAWT,QAEjF,8BACI,cAAC,IAAD,CAAOM,YAAa,WAAYC,KAAM,WAAYG,KAAM,WAAYF,SAAU,CAACvB,KAAWwB,UAAWT,QAEzG,gCACI,cAAC,IAAD,CAAOS,UAAWT,IAAOO,KAAM,aAAcG,KAAK,aADtD,kBAGCjB,EAAMG,MAAS,qBAAKC,UAAWC,IAAOa,iBAAvB,SAA0ClB,EAAMG,QAAe,KAC/E,8BACI,mDAmCDgB,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,WAA1BJ,EAzBD,SAACnB,GAMX,OAAGA,EAAMqB,OAED,cAAC,IAAD,CAAUG,GAAI,aAKlB,gCACI,uCACA,cAAChB,EAAD,CAAgBG,SAbP,SAACc,GACdzB,EAAMuB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.760afcdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__kvcTI\",\"error\":\"FormsControl_error__3Pvmg\",\"formSummaryError\":\"FormsControl_formSummaryError__1bHNL\"};","export const required = (value) => {\r\n    if(value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined; \r\n}","import React from \"react\";\r\nimport styles from './FormsControl.module.css';\r\n\r\n\r\n \r\nexport const Textarea = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    \r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError ? <span>{meta.error}</span> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    \r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError ? <span>{meta.error}</span> : null}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from './../common/FormsControls/FormsControl.module.css';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { Input } from \"../common/FormsControls/FormsControls\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/authReducer\";\r\nimport { Redirect } from \"react-router\";\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Login'} name={'email'} validate={[required]} component={Input} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} type={'password'} validate={[required]} component={Input} />\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'rememberMe'} type=\"checkbox\" /> remember me\r\n            </div>\r\n            {props.error ?  <div className={styles.formSummaryError}>{props.error}</div> : null}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    \r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return(\r\n            <Redirect to={'/profile'} />\r\n        );\r\n    }\r\n     \r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n\r\n\r\n"],"sourceRoot":""}